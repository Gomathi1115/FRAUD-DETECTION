# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import IsolationForest
from sklearn.neighbors import LocalOutlierFactor
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, confusion_matrix

# Simulated dataset for demonstration purposes
np.random.seed(42)
fraud_data = pd.DataFrame({
    'TransactionAmount': np.random.normal(1000, 200, 1000).tolist() + 
                         np.random.normal(5000, 500, 20).tolist(),
    'TransactionTime': np.random.normal(12, 2, 1000).tolist() + 
                       np.random.normal(2, 1, 20).tolist(),
    'Fraud': [0]*1000 + [1]*20  # Marking the last 20 transactions as fraudulent
})

# Shuffle the dataset
fraud_data = fraud_data.sample(frac=1).reset_index(drop=True)

# Separate features and labels
X = fraud_data.drop(columns='Fraud')
y = fraud_data['Fraud']

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Isolation Forest for Anomaly Detection
iso_forest = IsolationForest(contamination=0.02, random_state=42)
iso_preds = iso_forest.fit_predict(X_scaled)

# Local Outlier Factor (LOF) for Anomaly Detection
lof = LocalOutlierFactor(n_neighbors=20, contamination=0.02)
lof_preds = lof.fit_predict(X_scaled)

# Convert predictions to binary labels (1 for fraud, 0 for normal)
iso_labels = np.where(iso_preds == -1, 1, 0)  # -1 in anomaly detection is fraud
lof_labels = np.where(lof_preds == -1, 1, 0)

# Evaluation of Isolation Forest
print("Isolation Forest Metrics:")
print(confusion_matrix(y, iso_labels))
print(classification_report(y, iso_labels))

# Evaluation of Local Outlier Factor
print("\nLocal Outlier Factor Metrics:")
print(confusion_matrix(y, lof_labels))
print(classification_report(y, lof_labels))

# Visualizing the results
plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.scatter(fraud_data['TransactionAmount'], fraud_data['TransactionTime'], c=iso_labels, cmap='coolwarm')
plt.title('Isolation Forest Results')
plt.xlabel('Transaction Amount')
plt.ylabel('Transaction Time')

plt.subplot(1, 2, 2)
plt.scatter(fraud_data['TransactionAmount'], fraud_data['TransactionTime'], c=lof_labels, cmap='coolwarm')
plt.title('Local Outlier Factor Results')
plt.xlabel('Transaction Amount')
plt.ylabel('Transaction Time')

plt.tight_layout()
plt.show()
